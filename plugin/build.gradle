buildscript {
    ext {
        grailsVersion = project.grailsVersion
    }
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:3.0.16"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.2"
    }
}
plugins {
    id "io.spring.dependency-management" version "1.0.7.RELEASE"
}
dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:$grailsVersion"
    }
    applyMavenExclusions false
}
version projectVersion
group "org.grails.plugins"

//apply plugin: 'maven-publish'
apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"org.grails.grails-plugin"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
    maven { url "https://repo.grails.org/grails/plugins" }
    maven { url "https://mvnrepository.com/" }
    maven { url "http://download.java.net/maven/2/" }
}

def moduleExcludes = [
    'junit',
    'spring-aop',
    'spring-core',
    'spring-oxm',
    'spring-test',
    'spring-tx',
    'slf4j-log4j12',
    'log4j'
]

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging:1.2.7.RELEASE"
    compile "org.springframework.boot:spring-boot-autoconfigure:1.2.7.RELEASE"
    compile "org.grails:grails-core:3.0.16"
    compile "org.springframework.boot:spring-boot-starter-actuator:1.2.7.RELEASE"
    compile "org.springframework.boot:spring-boot-starter-tomcat:1.2.7.RELEASE"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async:3.3.0"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:gsp:3.3.0"
    console "org.grails:grails-console"
    //profile "org.grails.profiles:web-plugin"
    provided "org.grails:grails-plugin-services"
    provided "org.grails:grails-plugin-domain-class"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:2.14.2"
    //testCompile "org.grails:grails-gorm-testing-support"
    //testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails:grails-plugin-testing"
    testCompile "cglib:cglib:3.2.5"

    compile("org.springframework.batch:spring-batch-core:${springBatchVersion}") {
        moduleExcludes.each { exclude module: it }
    }
    compile("org.springframework.batch:spring-batch-infrastructure:${springBatchVersion}") {
        moduleExcludes.each { exclude module: it }
    }
    compile( "org.springframework.batch:spring-batch-admin-resources:${springBatchAdminVersion}") {
        moduleExcludes.each { exclude module: it }
    }
    compile("org.springframework.batch:spring-batch-admin-manager:${springBatchAdminVersion}") {
        moduleExcludes.each { exclude module: it }
    }


    //testRuntime "org.springframework.batch:spring-batch-test:${springBatchVersion}"
}

allprojects {
    tasks.withType(Test) {
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) {
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

assets {
    packagePlugin = true
}

//apply from: rootProject.file("gradle/publishing.gradle")
